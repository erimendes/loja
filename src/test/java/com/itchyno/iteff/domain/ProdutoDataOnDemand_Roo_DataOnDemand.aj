// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.itchyno.iteff.domain;

import com.itchyno.iteff.domain.Ambiente;
import com.itchyno.iteff.domain.AmbienteDataOnDemand;
import com.itchyno.iteff.domain.Produto;
import com.itchyno.iteff.domain.ProdutoDataOnDemand;
import com.itchyno.iteff.domain.TipoProduto;
import com.itchyno.iteff.domain.TipoProdutoDataOnDemand;
import com.itchyno.iteff.domain.Usuario;
import com.itchyno.iteff.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProdutoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProdutoDataOnDemand: @Component;
    
    private Random ProdutoDataOnDemand.rnd = new SecureRandom();
    
    private List<Produto> ProdutoDataOnDemand.data;
    
    @Autowired
    AmbienteDataOnDemand ProdutoDataOnDemand.ambienteDataOnDemand;
    
    @Autowired
    TipoProdutoDataOnDemand ProdutoDataOnDemand.tipoProdutoDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand ProdutoDataOnDemand.usuarioDataOnDemand;
    
    public Produto ProdutoDataOnDemand.getNewTransientProduto(int index) {
        Produto obj = new Produto();
        setCodigo(obj, index);
        setDataCompra(obj, index);
        setDescricao(obj, index);
        setEan13(obj, index);
        setFabricante(obj, index);
        setNome(obj, index);
        setQuantidade(obj, index);
        setTipo(obj, index);
        setUsuarioCadastro(obj, index);
        setValorCompra(obj, index);
        setValorVenda(obj, index);
        return obj;
    }
    
    public void ProdutoDataOnDemand.setCodigo(Produto obj, int index) {
        Ambiente codigo = ambienteDataOnDemand.getRandomAmbiente();
        obj.setCodigo(codigo);
    }
    
    public void ProdutoDataOnDemand.setDataCompra(Produto obj, int index) {
        Date dataCompra = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataCompra(dataCompra);
    }
    
    public void ProdutoDataOnDemand.setDescricao(Produto obj, int index) {
        String descricao = "descricao_" + index;
        if (descricao.length() > 2000) {
            descricao = descricao.substring(0, 2000);
        }
        obj.setDescricao(descricao);
    }
    
    public void ProdutoDataOnDemand.setEan13(Produto obj, int index) {
        Long ean13 = new Integer(index).longValue();
        obj.setEan13(ean13);
    }
    
    public void ProdutoDataOnDemand.setFabricante(Produto obj, int index) {
        String fabricante = "fabricante_" + index;
        if (fabricante.length() > 255) {
            fabricante = fabricante.substring(0, 255);
        }
        obj.setFabricante(fabricante);
    }
    
    public void ProdutoDataOnDemand.setNome(Produto obj, int index) {
        String nome = "nome_" + index;
        if (nome.length() > 255) {
            nome = nome.substring(0, 255);
        }
        obj.setNome(nome);
    }
    
    public void ProdutoDataOnDemand.setQuantidade(Produto obj, int index) {
        Long quantidade = new Integer(index).longValue();
        obj.setQuantidade(quantidade);
    }
    
    public void ProdutoDataOnDemand.setTipo(Produto obj, int index) {
        TipoProduto tipo = tipoProdutoDataOnDemand.getRandomTipoProduto();
        obj.setTipo(tipo);
    }
    
    public void ProdutoDataOnDemand.setUsuarioCadastro(Produto obj, int index) {
        Usuario usuarioCadastro = usuarioDataOnDemand.getRandomUsuario();
        obj.setUsuarioCadastro(usuarioCadastro);
    }
    
    public void ProdutoDataOnDemand.setValorCompra(Produto obj, int index) {
        Double valorCompra = new Integer(index).doubleValue();
        obj.setValorCompra(valorCompra);
    }
    
    public void ProdutoDataOnDemand.setValorVenda(Produto obj, int index) {
        Double valorVenda = new Integer(index).doubleValue();
        obj.setValorVenda(valorVenda);
    }
    
    public Produto ProdutoDataOnDemand.getSpecificProduto(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Produto obj = data.get(index);
        Long id = obj.getId();
        return Produto.findProduto(id);
    }
    
    public Produto ProdutoDataOnDemand.getRandomProduto() {
        init();
        Produto obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Produto.findProduto(id);
    }
    
    public boolean ProdutoDataOnDemand.modifyProduto(Produto obj) {
        return false;
    }
    
    public void ProdutoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Produto.findProdutoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Produto' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Produto>();
        for (int i = 0; i < 10; i++) {
            Produto obj = getNewTransientProduto(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
