// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.itchyno.iteff.domain;

import com.itchyno.iteff.domain.Ambiente;
import com.itchyno.iteff.domain.AmbienteDataOnDemand;
import com.itchyno.iteff.domain.Equipamento;
import com.itchyno.iteff.domain.EquipamentoDataOnDemand;
import com.itchyno.iteff.domain.TipoEquipamento;
import com.itchyno.iteff.domain.TipoEquipamentoDataOnDemand;
import com.itchyno.iteff.domain.Usuario;
import com.itchyno.iteff.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EquipamentoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EquipamentoDataOnDemand: @Component;
    
    private Random EquipamentoDataOnDemand.rnd = new SecureRandom();
    
    private List<Equipamento> EquipamentoDataOnDemand.data;
    
    @Autowired
    AmbienteDataOnDemand EquipamentoDataOnDemand.ambienteDataOnDemand;
    
    @Autowired
    TipoEquipamentoDataOnDemand EquipamentoDataOnDemand.tipoEquipamentoDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand EquipamentoDataOnDemand.usuarioDataOnDemand;
    
    public Equipamento EquipamentoDataOnDemand.getNewTransientEquipamento(int index) {
        Equipamento obj = new Equipamento();
        setCodigo(obj, index);
        setDataCompra(obj, index);
        setDescricao(obj, index);
        setEan13(obj, index);
        setQuantidade(obj, index);
        setTipo(obj, index);
        setUsuarioCadastro(obj, index);
        setValorCompra(obj, index);
        setValorVenda(obj, index);
        return obj;
    }
    
    public void EquipamentoDataOnDemand.setCodigo(Equipamento obj, int index) {
        Ambiente codigo = ambienteDataOnDemand.getRandomAmbiente();
        obj.setCodigo(codigo);
    }
    
    public void EquipamentoDataOnDemand.setDataCompra(Equipamento obj, int index) {
        Date dataCompra = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataCompra(dataCompra);
    }
    
    public void EquipamentoDataOnDemand.setDescricao(Equipamento obj, int index) {
        String descricao = "descricao_" + index;
        obj.setDescricao(descricao);
    }
    
    public void EquipamentoDataOnDemand.setEan13(Equipamento obj, int index) {
        Long ean13 = new Integer(index).longValue();
        obj.setEan13(ean13);
    }
    
    public void EquipamentoDataOnDemand.setQuantidade(Equipamento obj, int index) {
        Long quantidade = new Integer(index).longValue();
        obj.setQuantidade(quantidade);
    }
    
    public void EquipamentoDataOnDemand.setTipo(Equipamento obj, int index) {
        TipoEquipamento tipo = tipoEquipamentoDataOnDemand.getRandomTipoEquipamento();
        obj.setTipo(tipo);
    }
    
    public void EquipamentoDataOnDemand.setUsuarioCadastro(Equipamento obj, int index) {
        Usuario usuarioCadastro = usuarioDataOnDemand.getRandomUsuario();
        obj.setUsuarioCadastro(usuarioCadastro);
    }
    
    public void EquipamentoDataOnDemand.setValorCompra(Equipamento obj, int index) {
        Double valorCompra = new Integer(index).doubleValue();
        obj.setValorCompra(valorCompra);
    }
    
    public void EquipamentoDataOnDemand.setValorVenda(Equipamento obj, int index) {
        Double valorVenda = new Integer(index).doubleValue();
        obj.setValorVenda(valorVenda);
    }
    
    public Equipamento EquipamentoDataOnDemand.getSpecificEquipamento(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Equipamento obj = data.get(index);
        Long id = obj.getId();
        return Equipamento.findEquipamento(id);
    }
    
    public Equipamento EquipamentoDataOnDemand.getRandomEquipamento() {
        init();
        Equipamento obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Equipamento.findEquipamento(id);
    }
    
    public boolean EquipamentoDataOnDemand.modifyEquipamento(Equipamento obj) {
        return false;
    }
    
    public void EquipamentoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Equipamento.findEquipamentoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Equipamento' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Equipamento>();
        for (int i = 0; i < 10; i++) {
            Equipamento obj = getNewTransientEquipamento(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
