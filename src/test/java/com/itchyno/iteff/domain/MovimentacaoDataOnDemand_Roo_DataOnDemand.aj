// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.itchyno.iteff.domain;

import com.itchyno.iteff.domain.Ambiente;
import com.itchyno.iteff.domain.AmbienteDataOnDemand;
import com.itchyno.iteff.domain.Equipamento;
import com.itchyno.iteff.domain.EquipamentoDataOnDemand;
import com.itchyno.iteff.domain.Movimentacao;
import com.itchyno.iteff.domain.MovimentacaoDataOnDemand;
import com.itchyno.iteff.domain.Produto;
import com.itchyno.iteff.domain.ProdutoDataOnDemand;
import com.itchyno.iteff.domain.TipoMovimentacao;
import com.itchyno.iteff.domain.TipoMovimentacaoDataOnDemand;
import com.itchyno.iteff.domain.Usuario;
import com.itchyno.iteff.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MovimentacaoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MovimentacaoDataOnDemand: @Component;
    
    private Random MovimentacaoDataOnDemand.rnd = new SecureRandom();
    
    private List<Movimentacao> MovimentacaoDataOnDemand.data;
    
    @Autowired
    AmbienteDataOnDemand MovimentacaoDataOnDemand.ambienteDataOnDemand;
    
    @Autowired
    EquipamentoDataOnDemand MovimentacaoDataOnDemand.equipamentoDataOnDemand;
    
    @Autowired
    ProdutoDataOnDemand MovimentacaoDataOnDemand.produtoDataOnDemand;
    
    @Autowired
    TipoMovimentacaoDataOnDemand MovimentacaoDataOnDemand.tipoMovimentacaoDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand MovimentacaoDataOnDemand.usuarioDataOnDemand;
    
    public Movimentacao MovimentacaoDataOnDemand.getNewTransientMovimentacao(int index) {
        Movimentacao obj = new Movimentacao();
        setCodigo(obj, index);
        setCriacao(obj, index);
        setEquipamento(obj, index);
        setIndCancelamento(obj, index);
        setNota(obj, index);
        setProduto(obj, index);
        setQuantidade(obj, index);
        setSerie(obj, index);
        setTipo(obj, index);
        setUsuarioCadastro(obj, index);
        setValorTotal(obj, index);
        setValorUnitario(obj, index);
        return obj;
    }
    
    public void MovimentacaoDataOnDemand.setCodigo(Movimentacao obj, int index) {
        Ambiente codigo = ambienteDataOnDemand.getRandomAmbiente();
        obj.setCodigo(codigo);
    }
    
    public void MovimentacaoDataOnDemand.setCriacao(Movimentacao obj, int index) {
        Date criacao = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCriacao(criacao);
    }
    
    public void MovimentacaoDataOnDemand.setEquipamento(Movimentacao obj, int index) {
        Equipamento equipamento = equipamentoDataOnDemand.getRandomEquipamento();
        obj.setEquipamento(equipamento);
    }
    
    public void MovimentacaoDataOnDemand.setIndCancelamento(Movimentacao obj, int index) {
        Boolean indCancelamento = Boolean.TRUE;
        obj.setIndCancelamento(indCancelamento);
    }
    
    public void MovimentacaoDataOnDemand.setNota(Movimentacao obj, int index) {
        String nota = "nota_" + index;
        if (nota.length() > 255) {
            nota = nota.substring(0, 255);
        }
        obj.setNota(nota);
    }
    
    public void MovimentacaoDataOnDemand.setProduto(Movimentacao obj, int index) {
        Produto produto = produtoDataOnDemand.getRandomProduto();
        obj.setProduto(produto);
    }
    
    public void MovimentacaoDataOnDemand.setQuantidade(Movimentacao obj, int index) {
        Long quantidade = new Integer(index).longValue();
        obj.setQuantidade(quantidade);
    }
    
    public void MovimentacaoDataOnDemand.setSerie(Movimentacao obj, int index) {
        String serie = "serie_" + index;
        if (serie.length() > 255) {
            serie = serie.substring(0, 255);
        }
        obj.setSerie(serie);
    }
    
    public void MovimentacaoDataOnDemand.setTipo(Movimentacao obj, int index) {
        TipoMovimentacao tipo = tipoMovimentacaoDataOnDemand.getRandomTipoMovimentacao();
        obj.setTipo(tipo);
    }
    
    public void MovimentacaoDataOnDemand.setUsuarioCadastro(Movimentacao obj, int index) {
        Usuario usuarioCadastro = usuarioDataOnDemand.getRandomUsuario();
        obj.setUsuarioCadastro(usuarioCadastro);
    }
    
    public void MovimentacaoDataOnDemand.setValorTotal(Movimentacao obj, int index) {
        Double valorTotal = new Integer(index).doubleValue();
        obj.setValorTotal(valorTotal);
    }
    
    public void MovimentacaoDataOnDemand.setValorUnitario(Movimentacao obj, int index) {
        Double valorUnitario = new Integer(index).doubleValue();
        obj.setValorUnitario(valorUnitario);
    }
    
    public Movimentacao MovimentacaoDataOnDemand.getSpecificMovimentacao(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Movimentacao obj = data.get(index);
        Long id = obj.getId();
        return Movimentacao.findMovimentacao(id);
    }
    
    public Movimentacao MovimentacaoDataOnDemand.getRandomMovimentacao() {
        init();
        Movimentacao obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Movimentacao.findMovimentacao(id);
    }
    
    public boolean MovimentacaoDataOnDemand.modifyMovimentacao(Movimentacao obj) {
        return false;
    }
    
    public void MovimentacaoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Movimentacao.findMovimentacaoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Movimentacao' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Movimentacao>();
        for (int i = 0; i < 10; i++) {
            Movimentacao obj = getNewTransientMovimentacao(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
