// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.itchyno.iteff.domain;

import com.itchyno.iteff.domain.Ambiente;
import com.itchyno.iteff.domain.AmbienteDataOnDemand;
import com.itchyno.iteff.domain.Cliente;
import com.itchyno.iteff.domain.ClienteDataOnDemand;
import com.itchyno.iteff.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ClienteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClienteDataOnDemand: @Component;
    
    private Random ClienteDataOnDemand.rnd = new SecureRandom();
    
    private List<Cliente> ClienteDataOnDemand.data;
    
    @Autowired
    AmbienteDataOnDemand ClienteDataOnDemand.ambienteDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand ClienteDataOnDemand.usuarioDataOnDemand;
    
    public Cliente ClienteDataOnDemand.getNewTransientCliente(int index) {
        Cliente obj = new Cliente();
        setCodigo(obj, index);
        setCompEndereco(obj, index);
        setEmail(obj, index);
        setNome(obj, index);
        setNomeCidade(obj, index);
        setNomeEndereco(obj, index);
        setNomeEstado(obj, index);
        setNomePais(obj, index);
        setNumCelular1(obj, index);
        setNumCelular2(obj, index);
        setNumEndereco(obj, index);
        setNumTelefone1(obj, index);
        setNumTelefone2(obj, index);
        return obj;
    }
    
    public void ClienteDataOnDemand.setCodigo(Cliente obj, int index) {
        Ambiente codigo = ambienteDataOnDemand.getRandomAmbiente();
        obj.setCodigo(codigo);
    }
    
    public void ClienteDataOnDemand.setCompEndereco(Cliente obj, int index) {
        String compEndereco = "compEndereco_" + index;
        if (compEndereco.length() > 50) {
            compEndereco = compEndereco.substring(0, 50);
        }
        obj.setCompEndereco(compEndereco);
    }
    
    public void ClienteDataOnDemand.setEmail(Cliente obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 255) {
            email = email.substring(0, 255);
        }
        obj.setEmail(email);
    }
    
    public void ClienteDataOnDemand.setNome(Cliente obj, int index) {
        String nome = "nome_" + index;
        if (nome.length() > 255) {
            nome = nome.substring(0, 255);
        }
        obj.setNome(nome);
    }
    
    public void ClienteDataOnDemand.setNomeCidade(Cliente obj, int index) {
        String nomeCidade = "nomeCidade_" + index;
        if (nomeCidade.length() > 50) {
            nomeCidade = nomeCidade.substring(0, 50);
        }
        obj.setNomeCidade(nomeCidade);
    }
    
    public void ClienteDataOnDemand.setNomeEndereco(Cliente obj, int index) {
        String nomeEndereco = "nomeEndereco_" + index;
        if (nomeEndereco.length() > 255) {
            nomeEndereco = nomeEndereco.substring(0, 255);
        }
        obj.setNomeEndereco(nomeEndereco);
    }
    
    public void ClienteDataOnDemand.setNomeEstado(Cliente obj, int index) {
        String nomeEstado = "nomeEstado_" + index;
        if (nomeEstado.length() > 50) {
            nomeEstado = nomeEstado.substring(0, 50);
        }
        obj.setNomeEstado(nomeEstado);
    }
    
    public void ClienteDataOnDemand.setNomePais(Cliente obj, int index) {
        String nomePais = "nomePais_" + index;
        if (nomePais.length() > 50) {
            nomePais = nomePais.substring(0, 50);
        }
        obj.setNomePais(nomePais);
    }
    
    public void ClienteDataOnDemand.setNumCelular1(Cliente obj, int index) {
        Integer numCelular1 = new Integer(index);
        obj.setNumCelular1(numCelular1);
    }
    
    public void ClienteDataOnDemand.setNumCelular2(Cliente obj, int index) {
        Integer numCelular2 = new Integer(index);
        obj.setNumCelular2(numCelular2);
    }
    
    public void ClienteDataOnDemand.setNumEndereco(Cliente obj, int index) {
        Integer numEndereco = new Integer(index);
        obj.setNumEndereco(numEndereco);
    }
    
    public void ClienteDataOnDemand.setNumTelefone1(Cliente obj, int index) {
        Integer numTelefone1 = new Integer(index);
        obj.setNumTelefone1(numTelefone1);
    }
    
    public void ClienteDataOnDemand.setNumTelefone2(Cliente obj, int index) {
        Integer numTelefone2 = new Integer(index);
        obj.setNumTelefone2(numTelefone2);
    }
    
    public Cliente ClienteDataOnDemand.getSpecificCliente(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Cliente obj = data.get(index);
        Long id = obj.getId();
        return Cliente.findCliente(id);
    }
    
    public Cliente ClienteDataOnDemand.getRandomCliente() {
        init();
        Cliente obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Cliente.findCliente(id);
    }
    
    public boolean ClienteDataOnDemand.modifyCliente(Cliente obj) {
        return false;
    }
    
    public void ClienteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Cliente.findClienteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Cliente' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Cliente>();
        for (int i = 0; i < 10; i++) {
            Cliente obj = getNewTransientCliente(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
